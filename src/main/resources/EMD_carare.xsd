<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet xmlns:car="http://www.carare.eu/carareSchema" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dcterms="http://purl.org/dc/terms/"
                xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:eas="http://easy.dans.knaw.nl/easy/easymetadata/eas/"
                xmlns:emd="http://easy.dans.knaw.nl/easy/easymetadata/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xsi:schemaLocation="http://www.carare.eu/carareSchema carare-v2.0.1.xsd"
                exclude-result-prefixes="emd dc dcterms eas car" version="2.0">

    <xsl:output encoding="UTF-8" indent="yes" method="xml" version="1.0"/>

    <xsl:template match="/">
        <xsl:apply-templates select="emd:easymetadata"/>
    </xsl:template>
    <xsl:template match="emd:easymetadata">
        <xsl:element name="car:carareWrap">
            <!-- URN based pid
      <xsl:variable name="pid" select="emd:identifier/dc:identifier[@eas:scheme=&apos;PID&apos; or @eas:identification-system=&apos;http://www.persistent-identifier.nl&apos;]"></xsl:variable>
      -->
            <xsl:variable name="doi"
                          select="emd:identifier/dc:identifier[@eas:scheme = &apos;DOI&apos; or @eas:scheme = &apos;DOI_OTHER_ACCESS&apos;]"/>
            <car:carare>
                <xsl:attribute name="id">
                    <xsl:value-of select="$doi"/>
                </xsl:attribute>
                <car:collectionInformation>
                    <car:title lang="en">
                        <xsl:text>e-archive Dutch Archaeology (DANS-EDNA)</xsl:text>
                    </car:title>
                    <car:title lang="nl" preferred="true">
                        <xsl:text>e-depot Nederlandse archeologie (DANS-EDNA)</xsl:text>
                    </car:title>
                    <car:keywords lang="en">
                        <xsl:text>data archive; datasets; publications; archaeological research; Archaeology; the Netherlands</xsl:text>
                    </car:keywords>
                    <car:contacts>
                        <car:name>Drs. Hella Hollander</car:name>
                        <car:role lang="en">data archivist archaeology</car:role>
                        <car:organization>Data Archiving and Networked Services (DANS)</car:organization>
                        <car:address>Anna van Saksenlaan 51, 2593 HW The Hague, the Netherlands</car:address>
                        <car:phone>+31 70 3494450</car:phone>
                        <car:email>hella.hollander@dans.knaw.nl</car:email>
                        <car:email>info@dans.knaw.nl</car:email>
                    </car:contacts>
                    <car:rights>
                        <car:reproductionRights>
                            <car:statement lang="en">
                                <xsl:text>allowed for research and educational use only</xsl:text>
                            </car:statement>
                            <car:statement lang="en">
                                <xsl:text>for personal reuse only, reproduction or redistribution in any form is not allowed, no commercial use allowed</xsl:text>
                            </car:statement>
                            <car:statement lang="en">
                                <xsl:text>attribution compulsory</xsl:text>
                            </car:statement>
                        </car:reproductionRights>
                        <car:licence>http://www.dans.knaw.nl/en/content/data-archive/terms-and-conditions</car:licence>
                    </car:rights>
                    <car:source>DANS-KNAW</car:source>
                    <car:language>nl</car:language>
                    <car:coverage>
                        <car:spatial>
                            <car:locationSet>
                                <car:geopoliticalArea>
                                    <car:geopoliticalAreaName lang="en">the Netherlands</car:geopoliticalAreaName>
                                    <car:geopoliticalAreaType lang="en">country</car:geopoliticalAreaType>
                                </car:geopoliticalArea>
                            </car:locationSet>
                        </car:spatial>
                    </car:coverage>
                </car:collectionInformation>

                <xsl:variable name="dataset_taal" select="emd:language/dc:language[@eas:scheme = &apos;ISO 639&apos;]"/>
                <xsl:variable name="meta_taal">
                    <xsl:choose>
                        <xsl:when test="$dataset_taal = &apos;dut/nld&apos;">nl</xsl:when>
                        <xsl:when test="$dataset_taal = &apos;eng&apos;">en</xsl:when>
                        <xsl:when test="$dataset_taal = &apos;fre/fra&apos;">fr</xsl:when>
                        <xsl:when test="$dataset_taal = &apos;ger/deu&apos;">de</xsl:when>
                        <xsl:otherwise>nl</xsl:otherwise>
                    </xsl:choose>
                </xsl:variable>
                <car:digitalResource>
                    <car:recordInformation>
                        <car:id>
                            <xsl:value-of select="$doi"/>
                        </car:id>
                        <car:source>DANS-KNAW</car:source>
                        <car:country>NLD</car:country>
                        <car:creation>
                            <xsl:if test="emd:date/eas:dateSubmitted">
                                <car:date>
                                    <xsl:value-of select="substring(emd:date/eas:dateSubmitted[1], 1, 10)"/>
                                </car:date>
                            </xsl:if>
                            <car:actor>
                                <car:name lang="en">dataset depositor (locally known)</car:name>
                                <car:actorType lang="en">individual</car:actorType>
                                <car:roles lang="en">depositor</car:roles>
                            </car:actor>
                        </car:creation>
                        <car:language>
                            <xsl:value-of select="$meta_taal"/>
                        </car:language>
                        <car:rights>
                            <car:accessRights>
                                <car:grantedTo lang="en">
                                    <xsl:text>everyone</xsl:text>
                                </car:grantedTo>
                                <car:statement lang="en">
                                    <xsl:text>metadata of the archived dataset is freely available to everyone (open access)</xsl:text>
                                </car:statement>
                            </car:accessRights>
                        </car:rights>
                    </car:recordInformation>

                    <car:appellation>
                        <xsl:for-each select="emd:title/dc:title">
                            <car:name>
                                <xsl:attribute name="lang">
                                    <xsl:value-of select="$meta_taal"/>
                                </xsl:attribute>
                                <xsl:value-of select="."/>
                            </car:name>
                        </xsl:for-each>
                        <xsl:for-each select="emd:title/dcterms:alternative">
                            <car:name>
                                <xsl:attribute name="lang">
                                    <xsl:value-of select="$meta_taal"/>
                                </xsl:attribute>
                                <xsl:value-of select="."/>
                            </car:name>
                        </xsl:for-each>
                        <car:id>
                            <xsl:value-of select="$doi"/>
                        </car:id>
                    </car:appellation>

                    <xsl:for-each select="emd:creator/dc:creator">
                        <car:actors>
                            <car:name>
                                <xsl:value-of select="."/>
                            </car:name>
                            <car:actorType lang="en">individual</car:actorType>
                            <car:roles lang="en">creator</car:roles>
                        </car:actors>
                    </xsl:for-each>

                    <xsl:for-each select="emd:creator/eas:creator">
                        <xsl:element name="car:actors">
                            <xsl:call-template name="nameAndActorType"/>
                            <car:roles lang="en">creator</car:roles>
                            <xsl:if test="eas:role and eas:role != ''">
                                <car:roles lang="en"><xsl:value-of select="eas:role"/></car:roles>
                            </xsl:if>
                        </xsl:element>
                    </xsl:for-each>

                    <xsl:for-each select="emd:contributor/dc:contributor">
                        <car:actors>
                            <car:name>
                                <xsl:value-of select="."/>
                            </car:name>
                            <car:actorType lang="en">individual</car:actorType>
                            <car:roles lang="en">contributor</car:roles>
                        </car:actors>
                    </xsl:for-each>

                    <xsl:for-each select="emd:contributor/eas:contributor">
                        <xsl:element name="car:actors">
                            <xsl:call-template name="nameAndActorType"/>
                            <car:roles lang="en">contributor</car:roles>
                            <xsl:if test="eas:role and eas:role != ''">
                                <car:roles lang="en"><xsl:value-of select="eas:role"/></car:roles>
                            </xsl:if>
                        </xsl:element>
                    </xsl:for-each>

                    <car:format lang="en">text</car:format>
                    <xsl:for-each select="emd:format/dc:format[@eas:scheme = &apos;IMT&apos;]">
                        <car:format>
                            <xsl:value-of select="."/>
                        </car:format>
                    </xsl:for-each>

                    <car:medium lang="en">webresource</car:medium>
                    <car:extent lang="en">one or more digital files</car:extent>

                    <car:spatial>
                        <car:locationSet>
                            <xsl:for-each select="emd:coverage/dcterms:spatial">
                                <car:namedLocation>
                                    <xsl:value-of select="."/>
                                </car:namedLocation>
                            </xsl:for-each>
                            <car:geopoliticalArea>
                                <car:geopoliticalAreaName lang="en">the Netherlands</car:geopoliticalAreaName>
                                <car:geopoliticalAreaType lang="en">country</car:geopoliticalAreaType>
                            </car:geopoliticalArea>
                        </car:locationSet>

                        <xsl:apply-templates select="emd:coverage"/>
                    </car:spatial>
                    <car:subject>archeologie</car:subject>

                    <xsl:for-each select="emd:subject/dc:subject">
                        <xsl:variable name="abrsubject" select="@eas:scheme"/>
                        <xsl:if test="not($abrsubject) or $abrsubject != &apos;ABR&apos;">
                            <car:subject>
                                <xsl:value-of select="."/>
                            </car:subject>
                        </xsl:if>
                    </xsl:for-each>

                    <xsl:variable name="ind"
                                  select="emd:subject/dc:subject[@eas:scheme = &apos;ABR&apos; and (substring(., 1, 2) = &apos;EI&apos; or substring(., 1, 2) = &apos;EG&apos;)]"/>
                    <xsl:if test="$ind">
                        <car:subject>INDUSTRIAL</car:subject>
                    </xsl:if>
                    <xsl:variable name="aas"
                                  select="emd:subject/dc:subject[@eas:scheme = &apos;ABR&apos; and (substring(., 1, 2) = &apos;EX&apos; or substring(., 1, 2) = &apos;EL&apos;)]"/>
                    <xsl:if test="$aas">
                        <car:subject>AGRICULTURE_AND_SUBSISTENCE</car:subject>
                    </xsl:if>
                    <xsl:variable name="def" select="emd:subject/dc:subject[@eas:scheme = &apos;ABR&apos; and (substring(., 1, 1) = &apos;V&apos;)]"/>
                    <xsl:if test="$def">
                        <car:subject>DEFENCE</car:subject>
                    </xsl:if>
                    <xsl:variable name="dom" select="emd:subject/dc:subject[@eas:scheme = &apos;ABR&apos; and (substring(., 1, 1) = &apos;N&apos;)]"/>
                    <xsl:if test="$dom">
                        <car:subject>DOMESTIC</car:subject>
                    </xsl:if>
                    <xsl:variable name="rel"
                                  select="emd:subject/dc:subject[@eas:scheme = &apos;ABR&apos; and (. = &apos;DEPO&apos; or substring(., 1, 1) = &apos;G&apos; or substring(., 1, 1) = &apos;R&apos;)]"/>
                    <xsl:if test="$rel">
                        <car:subject>RELIGIOUS_RITUAL_AND_FUNERARY</car:subject>
                    </xsl:if>
                    <xsl:variable name="mar"
                                  select="emd:subject/dc:subject[@eas:scheme = &apos;ABR&apos; and (. = &apos;EVX&apos; or . = &apos;ESCH&apos;)]"/>
                    <xsl:if test="$mar">
                        <car:subject>MARITIME</car:subject>
                    </xsl:if>
                    <xsl:variable name="mbf"
                                  select="emd:subject/dc:subject[@eas:scheme = &apos;ABR&apos; and (. = &apos;GMEG&apos; or substring(., 1, 2) = &apos;RK&apos;)]"/>
                    <xsl:if test="$mbf">
                        <car:subject>MONUMENT_BY_FORM</car:subject>
                    </xsl:if>
                    <xsl:variable name="trans" select="emd:subject/dc:subject[@eas:scheme = &apos;ABR&apos; and (substring(., 1, 1) = &apos;I&apos;)]"/>
                    <xsl:if test="$trans">
                        <car:subject>TRANSPORT</car:subject>
                    </xsl:if>
                    <xsl:variable name="unk" select="emd:subject/dc:subject[@eas:scheme = &apos;ABR&apos; and (. = &apos;XXX&apos;)]"/>
                    <xsl:if test="$unk">
                        <car:subject>UNASSIGNED</car:subject>
                    </xsl:if>

                    <car:temporal>
                        <xsl:variable name="xxx" select="emd:coverage/dcterms:temporal[@eas:scheme = &apos;ABR&apos; and (. = &apos;XXX&apos;)]"/>
                        <xsl:if test="$xxx">
                            <car:periodName lang="en">UNCERTAIN</car:periodName>
                        </xsl:if>
                        <xsl:variable name="paleolithicum"
                                      select="emd:coverage/dcterms:temporal[@eas:scheme = &apos;ABR&apos; and (substring(., 1, 5) = &apos;PALEO&apos;)]"/>
                        <xsl:if test="$paleolithicum">
                            <car:periodName lang="en">PALAEOLITHIC</car:periodName>
                        </xsl:if>
                        <xsl:variable name="mesolithicum"
                                      select="emd:coverage/dcterms:temporal[@eas:scheme = &apos;ABR&apos; and (substring(., 1, 4) = &apos;MESO&apos;)]"/>
                        <xsl:if test="$mesolithicum">
                            <car:periodName lang="en">MESOLITHIC</car:periodName>
                        </xsl:if>
                        <xsl:variable name="neolithicum"
                                      select="emd:coverage/dcterms:temporal[@eas:scheme = &apos;ABR&apos; and (substring(., 1, 3) = &apos;NEO&apos;)]"/>
                        <xsl:if test="$neolithicum">
                            <car:periodName lang="en">NEOLITHIC</car:periodName>
                        </xsl:if>
                        <xsl:variable name="bronstijd"
                                      select="emd:coverage/dcterms:temporal[@eas:scheme = &apos;ABR&apos; and (substring(., 1, 5) = &apos;BRONS&apos;)]"/>
                        <xsl:if test="$bronstijd">
                            <car:periodName lang="en">BRONZE_AGE</car:periodName>
                        </xsl:if>
                        <xsl:variable name="ijzertijd"
                                      select="emd:coverage/dcterms:temporal[@eas:scheme = &apos;ABR&apos; and (substring(., 1, 3) = &apos;IJZ&apos;)]"/>
                        <xsl:if test="$ijzertijd">
                            <car:periodName lang="en">IRON_AGE</car:periodName>
                        </xsl:if>
                        <xsl:variable name="romeins"
                                      select="emd:coverage/dcterms:temporal[@eas:scheme = &apos;ABR&apos; and (substring(., 1, 3) = &apos;ROM&apos;)]"/>
                        <xsl:if test="$romeins">
                            <car:periodName lang="en">ROMAN</car:periodName>
                        </xsl:if>
                        <xsl:variable name="me"
                                      select="emd:coverage/dcterms:temporal[@eas:scheme = &apos;ABR&apos; and (substring(., 2, 2) = &apos;ME&apos;)]"/>
                        <xsl:if test="$me">
                            <car:periodName lang="en">MEDIEVAL</car:periodName>
                        </xsl:if>
                        <xsl:variable name="nieuwetijd"
                                      select="emd:coverage/dcterms:temporal[@eas:scheme = &apos;ABR&apos; and (substring(., 1, 2) = &apos;NT&apos;)]"/>
                        <xsl:if test="$nieuwetijd">
                            <car:periodName lang="en">MODERN</car:periodName>
                        </xsl:if>
                        <xsl:for-each select="emd:coverage/dcterms:temporal">
                            <xsl:variable name="abrtemporal" select="@eas:scheme"/>
                            <xsl:if test="not($abrtemporal) or $abrtemporal != &apos;ABR&apos;">
                                <car:displayDate lang="nl">
                                    <xsl:value-of select="."/>
                                </car:displayDate>
                            </xsl:if>
                        </xsl:for-each>

                        <xsl:variable name="t_paleolithicum"
                                      select="emd:coverage/dcterms:temporal[@eas:scheme = &apos;ABR&apos; and (substring(., 1, 5) = &apos;PALEO&apos;)]"/>
                        <xsl:if test="$t_paleolithicum">
                            <car:displayDate lang="en">Paleolithic (before 8800 BP)</car:displayDate>
                        </xsl:if>
                        <xsl:variable name="t_mesolithicum"
                                      select="emd:coverage/dcterms:temporal[@eas:scheme = &apos;ABR&apos; and (substring(., 1, 4) = &apos;MESO&apos;)]"/>
                        <xsl:if test="$t_mesolithicum">
                            <car:displayDate lang="en">Mesolithic (8800 BP - 4900 BP)</car:displayDate>
                        </xsl:if>
                        <xsl:variable name="t_neolithicum"
                                      select="emd:coverage/dcterms:temporal[@eas:scheme = &apos;ABR&apos; and (substring(., 1, 3) = &apos;NEO&apos;)]"/>
                        <xsl:if test="$t_neolithicum">
                            <car:displayDate lang="en">Neolithic (4900 BP - 2000 BP)</car:displayDate>
                        </xsl:if>
                        <xsl:variable name="t_bronstijd"
                                      select="emd:coverage/dcterms:temporal[@eas:scheme = &apos;ABR&apos; and (substring(., 1, 5) = &apos;BRONS&apos;)]"/>
                        <xsl:if test="$t_bronstijd">
                            <car:displayDate lang="en">Bronze Age (2000 BP - 800 BP)</car:displayDate>
                        </xsl:if>
                        <xsl:variable name="t_ijzertijd"
                                      select="emd:coverage/dcterms:temporal[@eas:scheme = &apos;ABR&apos; and (substring(., 1, 3) = &apos;IJZ&apos;)]"/>
                        <xsl:if test="$t_ijzertijd">
                            <car:displayDate lang="en">Iron Age (800 BP - 12 BP)</car:displayDate>
                        </xsl:if>
                        <xsl:variable name="t_romeins"
                                      select="emd:coverage/dcterms:temporal[@eas:scheme = &apos;ABR&apos; and (substring(., 1, 3) = &apos;ROM&apos;)]"/>
                        <xsl:if test="$t_romeins">
                            <car:displayDate lang="en">Roman Era (12 BP - 450)</car:displayDate>
                        </xsl:if>
                        <xsl:variable name="t_me"
                                      select="emd:coverage/dcterms:temporal[@eas:scheme = &apos;ABR&apos; and (substring(., 2, 2) = &apos;ME&apos;)]"/>
                        <xsl:if test="$t_me">
                            <car:displayDate lang="en">Middle Ages (450 - 1500)</car:displayDate>
                        </xsl:if>
                        <xsl:variable name="t_nieuwetijd"
                                      select="emd:coverage/dcterms:temporal[@eas:scheme = &apos;ABR&apos; and (substring(., 1, 2) = &apos;NT&apos;)]"/>
                        <xsl:if test="$t_nieuwetijd">
                            <car:displayDate lang="en">Modern Era (after 1500)</car:displayDate>
                        </xsl:if>
                    </car:temporal>

                    <car:publicationStatement>
                        <xsl:for-each select="emd:publisher/dc:publisher">
                            <car:publisher>
                                <xsl:value-of select="."/>
                            </car:publisher>
                        </xsl:for-each>
                        <xsl:if test="not(emd:publisher/dc:publisher)">
                            <xsl:for-each select="emd:rights/dcterms:rightsHolder">
                                <car:publisher>
                                    <xsl:value-of select="."/>
                                </car:publisher>
                            </xsl:for-each>
                        </xsl:if>
                        <car:date>
                            <xsl:variable name="jaar" select="emd:date/eas:created[1]"/>
                            <xsl:value-of select="substring($jaar, 1, 10)"/>
                        </car:date>
                    </car:publicationStatement>

                    <xsl:variable name="Ntypes" select="count(emd:type/dc:type[@eas:scheme = &apos;DCMI&apos;])"/>
                    <xsl:choose>
                        <xsl:when test="$Ntypes > 0">
                            <car:type namespace="http://purl.org/dc/dcmitype/">
                                <xsl:for-each select="emd:type/dc:type[@eas:scheme = &apos;DCMI&apos;]">
                                    <xsl:value-of select="."/>
                                    <xsl:if test="position() != $Ntypes">
                                        <xsl:text/>
                                    </xsl:if>
                                </xsl:for-each>
                            </car:type>
                        </xsl:when>
                        <xsl:otherwise>
                            <car:type namespace="http://purl.org/dc/dcmitype/">Dataset</car:type>
                        </xsl:otherwise>
                    </xsl:choose>

                    <xsl:variable name="Ndescriptions" select="count(emd:description/dc:description)"/>
                    <car:description>
                        <xsl:attribute name="lang">
                            <xsl:value-of select="$meta_taal"/>
                        </xsl:attribute>
                        <xsl:for-each select="emd:description/dc:description">
                            <xsl:value-of select="."/>
                            <xsl:if test="position() != $Ndescriptions">
                                <xsl:text/>
                            </xsl:if>
                        </xsl:for-each>
                    </car:description>

                    <car:created>
                        <xsl:variable name="creatiedatum" select="emd:date/eas:created[1]"/>
                        <xsl:variable name="datumvorm" select="emd:date/eas:created[1]/@eas:format"/>
                        <xsl:choose>
                            <xsl:when test="$datumvorm = &apos;DAY&apos;">
                                <xsl:value-of select="substring($creatiedatum, 1, 10)"/>
                            </xsl:when>
                            <xsl:when test="$datumvorm = &apos;MONTH&apos;">
                                <xsl:value-of select="substring($creatiedatum, 1, 7)"/>
                            </xsl:when>
                            <xsl:when test="$datumvorm = &apos;YEAR&apos;">
                                <xsl:value-of select="substring($creatiedatum, 1, 4)"/>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:value-of select="$creatiedatum"/>
                            </xsl:otherwise>
                        </xsl:choose>
                    </car:created>

                    <xsl:for-each select="emd:language/dc:language[@eas:scheme = &apos;ISO 639&apos;]">
                        <xsl:choose>
                            <xsl:when test=". = &apos;dut/nld&apos;">
                                <car:language>nl</car:language>
                            </xsl:when>
                            <xsl:when test=". = &apos;eng&apos;">
                                <car:language>en</car:language>
                            </xsl:when>
                            <xsl:when test=". = &apos;fre/fra&apos;">
                                <car:language>fr</car:language>
                            </xsl:when>
                            <xsl:when test=". = &apos;ger/deu&apos;">
                                <car:language>de</car:language>
                            </xsl:when>
                        </xsl:choose>
                    </xsl:for-each>
                    <xsl:if test="not(emd:language/dc:language[@eas:scheme = &apos;ISO 639&apos;])">
                        <car:language>nl</car:language>
                    </xsl:if>
                    <!-- URN based pid
          <car:link>
            <xsl:value-of select="emd:identifier/dc:identifier[@eas:scheme=&apos;PID&apos; or @eas:identification-system=&apos;http://www.persistent-identifier.nl&apos;]/@eas:identification-system"></xsl:value-of>
            <xsl:text>/?identifier=</xsl:text>
            <xsl:value-of select="emd:identifier/dc:identifier[@eas:scheme=&apos;PID&apos; or @eas:identification-system=&apos;http://www.persistent-identifier.nl&apos;]"></xsl:value-of>
          </car:link>
          -->
                    <car:link>
                        <xsl:value-of
                                select="emd:identifier/dc:identifier[@eas:scheme = &apos;DOI&apos; or @eas:scheme = &apos;DOI_OTHER_ACCESS&apos;]/@eas:identification-system"/>
                        <xsl:text>/</xsl:text>
                        <xsl:value-of
                                select="emd:identifier/dc:identifier[@eas:scheme = &apos;DOI&apos; or @eas:scheme = &apos;DOI_OTHER_ACCESS&apos;]"/>
                    </car:link>
                    <xsl:for-each select="emd:identifier/dc:identifier[@eas:scheme = &apos;Archis_onderzoek_m_nr&apos;]">
                        <car:relations>
                            <car:sourceOfRelation>Archis - Research Notification</car:sourceOfRelation>
                            <car:typeOfRelation>hasEvent</car:typeOfRelation>
                            <car:targetOfRelation>
                                <xsl:value-of select="."/>
                            </car:targetOfRelation>
                        </car:relations>
                    </xsl:for-each>
                    <car:rights>
                        <xsl:variable name="accessrights" select="emd:rights/dcterms:accessRights[text()='OPEN_ACCESS' or text()='NO_ACCESS' or text()='REQUEST_PERMISSION' or text()='OPEN_ACCESS_FOR_REGISTERED_USERS' or text()='GROUP_ACCESS']"/>
                        <car:copyright>
                            <xsl:for-each select="emd:rights/dcterms:rightsHolder">
                                <car:rightsHolder>
                                    <xsl:value-of select="."/>
                                </car:rightsHolder>
                            </xsl:for-each>
                            <xsl:if test="not(emd:rights/dcterms:rightsHolder)">
                                <xsl:for-each select="emd:publisher/dc:publisher">
                                    <car:rightsHolder>
                                        <xsl:value-of select="."/>
                                    </car:rightsHolder>
                                </xsl:for-each>
                            </xsl:if>
                        </car:copyright>
                        <car:accessRights>
                            <car:grantedTo lang="en">
                                <xsl:choose>
                                    <xsl:when test="$accessrights = &apos;OPEN_ACCESS&apos;">
                                        <xsl:text>Everyone</xsl:text>
                                    </xsl:when>
                                    <xsl:when test="$accessrights = &apos;OPEN_ACCESS_FOR_REGISTERED_USERS&apos;">
                                        <xsl:text>Registered EASY users</xsl:text>
                                    </xsl:when>
                                    <xsl:when test="$accessrights = &apos;GROUP_ACCESS&apos;">
                                        <xsl:text>Registered EASY users, but belonging to the group of professional Dutch archaeologists only</xsl:text>
                                    </xsl:when>
                                    <xsl:when test="$accessrights = &apos;REQUEST_PERMISSION&apos;">
                                        <xsl:text>Registered EASY users, but after permission is granted by the depositor </xsl:text>
                                    </xsl:when>
                                    <xsl:when test="$accessrights = &apos;NO_ACCESS&apos;">
                                        <xsl:text>Registered EASY users, permission is granted occasionally after special mediation</xsl:text>
                                    </xsl:when>
                                </xsl:choose>
                            </car:grantedTo>
                            <car:conditions lang="en">
                                <xsl:text>Allowed for research and educational use, no commercial use allowed, attribution compulsory</xsl:text>
                            </car:conditions>

                            <car:dateFrom>
                                <xsl:value-of select="substring(emd:date/eas:available[1], 1, 10)"/>
                            </car:dateFrom>
                        </car:accessRights>

                        <xsl:variable name="licenses" select="emd:rights/dcterms:license"/>
                        <xsl:variable name="defaultLicenseText" select="'for personal use only, reproduction or redistribution in any form is not allowed, no commercial use is allowed'"/>
                        <xsl:choose>
                            <xsl:when test="$licenses">
                                <xsl:for-each select="$licenses">
                                    <car:reproductionRights>
                                        <car:statement lang="en">
                                            <xsl:choose>
                                                <xsl:when test=". = 'accept' and $accessrights = 'OPEN_ACCESS'">
                                                    <xsl:value-of select="'http://creativecommons.org/publicdomain/zero/1.0'"/>
                                                </xsl:when>
                                                <xsl:when test=". = 'accept'">
                                                    <xsl:value-of select="$defaultLicenseText"/>
                                                </xsl:when>
                                                <xsl:otherwise>
                                                    <xsl:value-of select="."/>
                                                </xsl:otherwise>
                                            </xsl:choose>
                                        </car:statement>
                                    </car:reproductionRights>
                                </xsl:for-each>
                            </xsl:when>
                            <xsl:otherwise>
                                <car:reproductionRights>
                                    <car:statement lang="en">
                                        <xsl:value-of select="$defaultLicenseText"/>
                                    </car:statement>
                                </car:reproductionRights>
                            </xsl:otherwise>
                        </xsl:choose>
                    </car:rights>
                </car:digitalResource>
            </car:carare>
        </xsl:element>
    </xsl:template>

    <xsl:template name="nameAndActorType">
        <xsl:variable name="titles">
            <xsl:choose>
                <xsl:when test="eas:title = &apos;&apos;">
                    <xsl:value-of select="&apos;&apos;"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="concat(&apos; &apos;, eas:title)"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>

        <xsl:variable name="initials">
            <xsl:choose>
                <xsl:when test="eas:initials = &apos;&apos;">
                    <xsl:value-of select="&apos;&apos;"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="concat(&apos; &apos;, eas:initials)"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>

        <xsl:variable name="prefix">
            <xsl:choose>
                <xsl:when test="eas:prefix = &apos;&apos;">
                    <xsl:value-of select="&apos;&apos;"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="concat(&apos; &apos;, eas:prefix)"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>

        <xsl:variable name="organization">
            <xsl:choose>
                <xsl:when test="eas:organization = &apos;&apos;">
                    <xsl:value-of select="&apos;&apos;"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="concat(&apos; (&apos;, eas:organization, &apos;)&apos;)"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>

        <xsl:choose>
            <xsl:when test="eas:surname = &apos;&apos;">
                <xsl:element name="car:name">
                    <xsl:value-of select="eas:organization"/>
                </xsl:element>
                <xsl:element name="car:actorType">
                    <xsl:value-of select="&apos;organization&apos;"/>
                </xsl:element>
            </xsl:when>
            <xsl:otherwise>
                <xsl:element name="car:name">
                    <xsl:value-of select="concat(eas:surname, &apos;,&apos;, $titles, $initials, $prefix, $organization)"/>
                </xsl:element>
                <xsl:element name="car:actorType">
                    <xsl:value-of select="&apos;individual&apos;"/>
                </xsl:element>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>



    <!-- =================================================================================== -->
    <!-- RD y, east, west to latitude converter                                              -->
    <!-- =================================================================================== -->
    <xsl:template name="lat-converter-">
        <xsl:param name="y" as="xs:decimal"/>
        <xsl:param name="east" as="xs:decimal"/>
        <xsl:param name="west" as="xs:decimal"/>
        <xsl:variable name="x" select="($east + $west) div 2"/>
        <xsl:value-of>
            <xsl:call-template name="rd-to-lat-long-lat">
                <xsl:with-param name="x" select="$x"/>
                <xsl:with-param name="y" select="$y"/>
            </xsl:call-template>
        </xsl:value-of>
    </xsl:template>
    <!-- =================================================================================== -->
    <!-- RD x, north, south to longitude converter                                           -->
    <!-- =================================================================================== -->
    <xsl:template name="lon-converter-">
        <xsl:param name="x" as="xs:double"/>
        <xsl:param name="north" as="xs:double"/>
        <xsl:param name="south" as="xs:double"/>
        <xsl:variable name="y" select="($north + $south) div 2"/>
        <xsl:value-of>
            <xsl:call-template name="rd-to-lat-long-lon">
                <xsl:with-param name="x" select="$x"/>
                <xsl:with-param name="y" select="$y"/>
            </xsl:call-template>
        </xsl:value-of>
    </xsl:template>

    <xsl:template name="rd-to-lat-long-lat">
        <xsl:param name="x" as="xs:double"/>
        <xsl:param name="y" as="xs:double"/>
        <xsl:variable name="p" select="($x - 155000.00) div 100000"/>
        <xsl:variable name="q" select="($y - 463000.00) div 100000"/>

        <xsl:variable name="df"
                      select="(($q * 3235.65389) + ($p * $p * -32.58297) + ($q * $q * -0.24750) + ($p * $p * $q * -0.84978) + ($q * $q * $q * -0.06550) + ($p * $p * $q * $q * -0.01709) + ($p * -0.00738) + ($p * $p * $p * $p * 0.00530) + ($p * $p * $q * $q * $q * -0.00039) + ($p * $p * $p * $p * $q * 0.00033) + ($p * $q * -0.00012)) div 3600"/>
        <xsl:value-of select="(round((52.15517440 + $df) * 100000000.00)) div 100000000.00"/>

    </xsl:template>

    <xsl:template name="rd-to-lat-long-lon">
        <xsl:param name="x" as="xs:double"/>
        <xsl:param name="y" as="xs:double"/>
        <xsl:variable name="p" select="($x - 155000.00) div 100000"/>
        <xsl:variable name="q" select="($y - 463000.00) div 100000"/>
        <xsl:variable name="dl"
                      select="(($p * 5260.52916) + ($p * $q * 105.94684) + ($p * $q * $q * 2.45656) + ($p * $p * $p * -0.81885) + ($p * $q * $q * $q * 0.05594) + ($p * $p * $p * $q * -0.05607) + ($q * 0.01199) + ($p * $p * $p * $q * $q * -0.00256) + ($p * $q * $q * $q * $q * 0.00128) + ($q * $q * 0.00022) + ($p * $p * -0.00022) + ($p * $p * $p * $p * $p * 0.00026)) div 3600"/>
        <xsl:value-of select="(round((5.387206210 + $dl) * 100000000.00)) div 100000000.00"/>
    </xsl:template>



    <xsl:template name="setPoint">
        <xsl:param name="x"/>
        <xsl:param name="y"/>

        <car:quickpoint>
            <car:x>
                <xsl:call-template name="rd-to-lat-long-lon">
                    <xsl:with-param name="x" select="$x"/>
                    <xsl:with-param name="y" select="$y"/>
                </xsl:call-template>
            </car:x>
            <car:y>
                <xsl:call-template name="rd-to-lat-long-lat">
                    <xsl:with-param name="x" select="$x"/>
                    <xsl:with-param name="y" select="$y"/>
                </xsl:call-template>
            </car:y>
        </car:quickpoint>
        <car:storedPrecision>10</car:storedPrecision>

    </xsl:template>

    <xsl:template name="setBoundingBox">
        <xsl:param name="north"/>
        <xsl:param name="east"/>
        <xsl:param name="south"/>
        <xsl:param name="west"/>
        <car:boundingBox>
            <car:minX>
                <xsl:call-template name="lon-converter-">
                    <xsl:with-param name="x" select="$west"/>
                    <xsl:with-param name="north" select="$north"/>
                    <xsl:with-param name="south" select="$south"/>
                </xsl:call-template>
            </car:minX>
            <car:maxX>
                <xsl:call-template name="lon-converter-">
                    <xsl:with-param name="x" select="$east"/>
                    <xsl:with-param name="north" select="$north"/>
                    <xsl:with-param name="south" select="$south"/>
                </xsl:call-template>
            </car:maxX>
            <car:minY>
                <xsl:call-template name="lat-converter-">
                    <xsl:with-param name="y" select="$south"/>
                    <xsl:with-param name="east" select="$east"/>
                    <xsl:with-param name="west" select="$west"/>
                </xsl:call-template>
            </car:minY>
            <car:maxY>
                <xsl:call-template name="lat-converter-">
                    <xsl:with-param name="y" select="$north"/>
                    <xsl:with-param name="east" select="$east"/>
                    <xsl:with-param name="west" select="$west"/>
                </xsl:call-template>
            </car:maxY>
        </car:boundingBox>
        <car:storedPrecision>10</car:storedPrecision>
    </xsl:template>

    <xsl:template match="emd:coverage">
        <xsl:if test="eas:spatial/*[@eas:scheme = 'RD' or @eas:scheme = 'degrees']">

            <car:spatialReferenceSystem>WGS84</car:spatialReferenceSystem>
            <car:geometry>
                <xsl:for-each select="eas:spatial[*[@eas:scheme = 'RD' or @eas:scheme = 'degrees']]">
                    <!-- we do only the first found eas:point or eas:box, since car only allows one quickpoint / boundingBox -->
                    <xsl:if test="position() = 1">
                        <xsl:choose>
                            <xsl:when test="eas:point and eas:point/@eas:scheme = 'RD'">
                                <xsl:call-template name="setPoint">
                                    <xsl:with-param name="x" select="eas:point/eas:x"/>
                                    <xsl:with-param name="y" select="eas:point/eas:y"/>
                                </xsl:call-template>
                            </xsl:when>
                            <xsl:when test="eas:box and eas:box/@eas:scheme = 'RD'">
                                <xsl:call-template name="setBoundingBox">
                                    <xsl:with-param name="north" select="eas:box/eas:north"/>
                                    <xsl:with-param name="east" select="eas:box/eas:east"/>
                                    <xsl:with-param name="south" select="eas:box/eas:south"/>
                                    <xsl:with-param name="west" select="eas:box/eas:west"/>
                                </xsl:call-template>
                            </xsl:when>
                            <xsl:when test="eas:polygon and eas:polygon/@eas:scheme = 'RD'">
                                <xsl:call-template name="setBoundingBox">
                                    <xsl:with-param name="north" select="max(eas:polygon/eas:polygon-exterior/eas:polygon-point/eas:y/xs:decimal(.))"/>
                                    <xsl:with-param name="east" select="max(eas:polygon/eas:polygon-exterior/eas:polygon-point/eas:x/xs:decimal(.))"/>
                                    <xsl:with-param name="south" select="min(eas:polygon/eas:polygon-exterior/eas:polygon-point/eas:y/xs:decimal(.))"/>
                                    <xsl:with-param name="west" select="min(eas:polygon/eas:polygon-exterior/eas:polygon-point/eas:x/xs:decimal(.))"/>
                                </xsl:call-template>
                            </xsl:when>
                            <xsl:when test="eas:polygon and eas:polygon/@eas:scheme = 'degrees'">
                                <car:boundingBox>
                                    <car:minX><xsl:value-of select="min(eas:polygon/eas:polygon-exterior/eas:polygon-point/eas:y/xs:decimal(.))"/></car:minX>
                                    <car:maxX><xsl:value-of select="max(eas:polygon/eas:polygon-exterior/eas:polygon-point/eas:y/xs:decimal(.))"/></car:maxX>
                                    <car:minY><xsl:value-of select="min(eas:polygon/eas:polygon-exterior/eas:polygon-point/eas:x/xs:decimal(.))"/></car:minY>
                                    <car:maxY><xsl:value-of select="max(eas:polygon/eas:polygon-exterior/eas:polygon-point/eas:x/xs:decimal(.))"/></car:maxY>
                                </car:boundingBox>
                            </xsl:when>
                        </xsl:choose>
                    </xsl:if>
                </xsl:for-each>
            </car:geometry>
        </xsl:if>
    </xsl:template>
</xsl:stylesheet>
